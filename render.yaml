# render.yaml (raiz do projeto)

# ==============================
# Serviços Web
# ==============================
services:
  - type: web
    name: modelfleuriet
    region: oregon
    plan: free
    env: python
    runtime: python
    buildCommand: |
      pip install -r requirements.txt
      # Sanity check: imprime a config de valuation
      python - <<PYCODE
from core.valuation_analysis import VALUATION_CONFIG
print("Valuation config:", VALUATION_CONFIG)
PYCODE
    startCommand: gunicorn flask_app:app
    envVars:
      - key: SECRET_KEY
        # Você pode gerar via painel ou deixar fixo
        value: fPBcJhn71BhNv8VgAgMw1L9Wz3Jse8hWxSpubPeuqk-
      - key: PYTHON_VERSION
        value: '3.10.13'
      - key: DATABASE_URL
        fromDatabase:
          name: modelfleuriet-db      # Nome do serviço de banco que você criou no Render
          property: connectionString

# ==============================
# Jobs (rodar uma vez ou manualmente)
# ==============================
jobs:
  # Job para popular o financial_data (pode rodar sempre que quiser rebuild)
  - name: db-setup
    type: run
    region: oregon
    plan: free
    env: python
    runtime: python
    buildCommand: pip install -r requirements.txt
    startCommand: python preprocess_to_db_light.py
    envVars:
      - key: PYTHON_VERSION
        value: '3.10.13'
      - key: DATABASE_URL
        fromDatabase:
          name: modelfleuriet-db
          property: connectionString

  # Job para recalcular valuation (manualmente ou via API)
  - name: valuation-worker
    type: run
    region: oregon
    plan: free
    env: python
    runtime: python
    buildCommand: pip install -r requirements.txt
    startCommand: python run_valuation_worker.py
    envVars:
      - key: PYTHON_VERSION
        value: '3.10.13'
      - key: DATABASE_URL
        fromDatabase:
          name: modelfleuriet-db
          property: connectionString
